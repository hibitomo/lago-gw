# VSW configuration file

# agents configuration section
[agents]
enable = [ "netlink", "config", "ipsec", "debugsh" ]

# Logging settings
[logging]
log = "stdout" # "file", "stdout", or "syslog"
# syslog = "localhost:627"
# syslog_network = "tcp" | "udp"
# syslog_tag = "lagopus2"
# syslog_priority = "LOG_USER"
# logfile = "/var/log/vsw.log"
# verbose = true # Outputs file and line number in C
# debugs = [ "ethdev", "bridge" ] # to debug "ethdev" and "bridge"
# debugs = [ "*" ] # to debug all modules

# DPDK configuration section
[dpdk]
core_mask = {{ dpdk_coremask }}
# core_list = "1,2,3,4,5,6,7"
memory_channel = 2
pmd_path = "/usr/local/lib"
num_elements = 131072
cache_size = 256

# Openconfigd section
[openconfig]
server_host = "localhost"	# Openconfigd server host
server_port = 2650		# Openconfigd server port
listen_port = 2653		# Port to listen for show command


# ethdev configuration section
[ethdev]
rx_core = {{ rx_core }}	# Slave core to use for RX
tx_core = {{ tx_core }}	# Slave core to use for TX

# Set force_linearize to true, if the link device doesn't
# support multi-segment mbuf.
force_linearize = false

# bridge configuration section
[bridge]
core = {{ rt_core }}

# RIF configuration section
[rif]
core = {{ rt_core }}

# tunnel configuration section
[tunnel]
  # IPsec tunnel
  [tunnel.ipsec]
  # Enable/Disable CPU core binding for IPsec.
  core_bind = false
  # Set CPU core mask.
  # It is better not to overlap with dpdk.core_mask.
  inbound_core_mask = {{ ipsec_in_cores }}
  outbound_core_mask = {{ ipsec_out_cores }}

  # IP in IP tunnel
  [tunnel.ipip]
  inbound_core = {{ rx_core }}
  outbound_core = {{ tx_core }}

  # GRE tunnel
  [tunnel.gre]
  inbound_core = {{ rx_core }}
  outbound_core = {{ tx_core }}

  # L2GRE tunnel
  [tunnel.l2gre]
  inbound_core = {{ rx_core }}
  outbound_core = {{ tx_core }}

  # VXLAN tunnel
  [tunnel.vxlan]
  inbound_core = {{ rx_core }}
  outbound_core = {{ tx_core }}
  aging_time = 300

# router configuration section
#
# rr_process_mode is processing mode for IPv4 options that require
# to record a route. The following modes are available.
#   * enable: process and forward packets as per RFC791
#   * disable: drops packets
#   * ignore: forward packets as if they did not contain the options
[router]
core = {{ rt_core }}
rr_process_mode = "disable"
